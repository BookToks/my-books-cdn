An operation happening doesn’t tell us what a statement means.

An operation by itself doesn’t say anything; only what it produces does, and that depends on what the operation is done to.

(Operations and functions are not the same thing.) A function can’t use itself as an input, but an operation’s result can be used again as the starting point.

This is how we can move step by step in a formal sequence (like moving up levels in a system Russell and Whitehead made). They didn’t really admit this kind of step-by-step move, but they used it anyway. 

When you apply an operation again and again to its own result, I call that successive application (like doing “O(O(O(a)))”, which means applying “O” three times to “a”).

You can also apply several operations one after another to different statements.

The general form for this kind of sequence looks like this: “[a, x, O(x)]”. This means: “a” is the start, “x” is any term in the sequence, and “O(x)” is the next term after “x”.

Saying you apply an operation over and over is the same as saying “and so on.”

One operation can undo what another one does. Operations can cancel each other out.

Sometimes operations disappear, like when you deny something twice in a row (“not not p” is the same as “p”).

All statements come from applying truth-operations to basic statements.

A truth-operation is how we get new true or false statements from basic ones.

Just like you can make new truth-functions from basic statements, you can also make new truth-functions from other truth-functions.
